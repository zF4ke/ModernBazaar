services:
    db:
        image: postgres:16
        restart: unless-stopped # docker will always restart the container unless it is explicitly stopped
        env_file:
            - .env # load environment variables from the .env file
        environment:
            POSTGRES_DB:       ${POSTGRES_DB:-bazaar}       # default database name
            POSTGRES_USER:     ${POSTGRES_USER:-bazaar}     # default username
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bazaar} # default password
        volumes:
            - dbdata:/var/lib/postgresql/data # persistent data
        ports:
            - "5432:5432" # expose the port 5432 to the host machine for debugging
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bazaar}"] # ensure database is ready before Core service
            interval: 10s
            timeout: 3s
            retries: 5
        networks:
            - internal # service-to-service only

    core:
        build:
            context: .. # points to the root directory
            dockerfile: infra/docker/core.Dockerfile # path to the Dockerfile for the Core service
        image: modern-bazaar/core:local # tags the built image
        depends_on:
            db:
                condition: service_healthy
        env_file:
            - .env # load environment variables from the .env file
        environment:
            SPRING_PROFILES_ACTIVE:     docker                      # tells Core to use application-docker.yml
            SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/${POSTGRES_DB} # database URL
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}             # database username
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}         # database password
            SPRING_SECURITY_USER_NAME:      ${SPRING_SECURITY_USER_NAME:-admin}
            SPRING_SECURITY_USER_PASSWORD:  ${SPRING_SECURITY_USER_PASSWORD}
        ports:
            - "8080:8080" # expose Core's port 8080
        healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep UP || exit 1"] # ensure Core is ready
            interval: 10s
            timeout: 3s
            retries: 5
        volumes:
            - ./keystore.p12:/config/keystore.p12:ro
            - core-heapdumps:/app/heapdumps # store heap dumps
            - core-logs:/app/logs           # store logs
        networks:
            - public   # accessible externally
            - internal # service-to-service only

    prometheus: # Prometheus service for monitoring
        image: prom/prometheus:latest
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro # config file
        ports:
            - "9090:9090" # expose Prometheus port 9090
        networks:
            - internal # service-to-service only

    grafana: # Grafana service for visualization, dashboards, etc.
        image: grafana/grafana:latest
        env_file:
            - .env # load environment variables from the .env file
        environment:
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD} # admin password for Grafana
        volumes:
            - grafana-data:/var/lib/grafana                 # persistent storage for Grafana data
            - ./grafana/provisioning:/etc/grafana/provisioning:ro # provisioning files for Grafana
        ports:
            - "3000:3000" # expose Grafana port 3000
        depends_on:
            - prometheus # ensure Prometheus is up first
        networks:
            - public   # accessible externally
            - internal # service-to-service only

    postgres-exporter:
        image: prometheuscommunity/postgres-exporter
        env_file:
            - .env # load environment variables from the .env file
        environment:
            DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable" # connection string
        ports:
            - "9187:9187" # expose exporter port
        depends_on:
            - db # ensure DB is up first
        networks:
            - internal # service-to-service only

volumes:
    dbdata:         # volume for PostgreSQL data
    grafana-data:   # volume for Grafana data
    core-heapdumps: # volume for Core service heap dumps
    core-logs:      # volume for Core service logs

networks:
    public:   # host-facing network
        driver: bridge
    internal: # isolated network for inter-service traffic
        driver: bridge
        internal: true
